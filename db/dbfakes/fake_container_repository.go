// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeContainerRepository struct {
	FindOrphanedContainersStub        func() ([]db.CreatingContainer, []db.CreatedContainer, []db.DestroyingContainer, error)
	findOrphanedContainersMutex       sync.RWMutex
	findOrphanedContainersArgsForCall []struct{}
	findOrphanedContainersReturns     struct {
		result1 []db.CreatingContainer
		result2 []db.CreatedContainer
		result3 []db.DestroyingContainer
		result4 error
	}
	findOrphanedContainersReturnsOnCall map[int]struct {
		result1 []db.CreatingContainer
		result2 []db.CreatedContainer
		result3 []db.DestroyingContainer
		result4 error
	}
	FindFailedContainersStub        func() ([]db.FailedContainer, error)
	findFailedContainersMutex       sync.RWMutex
	findFailedContainersArgsForCall []struct{}
	findFailedContainersReturns     struct {
		result1 []db.FailedContainer
		result2 error
	}
	findFailedContainersReturnsOnCall map[int]struct {
		result1 []db.FailedContainer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerRepository) FindOrphanedContainers() ([]db.CreatingContainer, []db.CreatedContainer, []db.DestroyingContainer, error) {
	fake.findOrphanedContainersMutex.Lock()
	ret, specificReturn := fake.findOrphanedContainersReturnsOnCall[len(fake.findOrphanedContainersArgsForCall)]
	fake.findOrphanedContainersArgsForCall = append(fake.findOrphanedContainersArgsForCall, struct{}{})
	fake.recordInvocation("FindOrphanedContainers", []interface{}{})
	fake.findOrphanedContainersMutex.Unlock()
	if fake.FindOrphanedContainersStub != nil {
		return fake.FindOrphanedContainersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.findOrphanedContainersReturns.result1, fake.findOrphanedContainersReturns.result2, fake.findOrphanedContainersReturns.result3, fake.findOrphanedContainersReturns.result4
}

func (fake *FakeContainerRepository) FindOrphanedContainersCallCount() int {
	fake.findOrphanedContainersMutex.RLock()
	defer fake.findOrphanedContainersMutex.RUnlock()
	return len(fake.findOrphanedContainersArgsForCall)
}

func (fake *FakeContainerRepository) FindOrphanedContainersReturns(result1 []db.CreatingContainer, result2 []db.CreatedContainer, result3 []db.DestroyingContainer, result4 error) {
	fake.FindOrphanedContainersStub = nil
	fake.findOrphanedContainersReturns = struct {
		result1 []db.CreatingContainer
		result2 []db.CreatedContainer
		result3 []db.DestroyingContainer
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeContainerRepository) FindOrphanedContainersReturnsOnCall(i int, result1 []db.CreatingContainer, result2 []db.CreatedContainer, result3 []db.DestroyingContainer, result4 error) {
	fake.FindOrphanedContainersStub = nil
	if fake.findOrphanedContainersReturnsOnCall == nil {
		fake.findOrphanedContainersReturnsOnCall = make(map[int]struct {
			result1 []db.CreatingContainer
			result2 []db.CreatedContainer
			result3 []db.DestroyingContainer
			result4 error
		})
	}
	fake.findOrphanedContainersReturnsOnCall[i] = struct {
		result1 []db.CreatingContainer
		result2 []db.CreatedContainer
		result3 []db.DestroyingContainer
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeContainerRepository) FindFailedContainers() ([]db.FailedContainer, error) {
	fake.findFailedContainersMutex.Lock()
	ret, specificReturn := fake.findFailedContainersReturnsOnCall[len(fake.findFailedContainersArgsForCall)]
	fake.findFailedContainersArgsForCall = append(fake.findFailedContainersArgsForCall, struct{}{})
	fake.recordInvocation("FindFailedContainers", []interface{}{})
	fake.findFailedContainersMutex.Unlock()
	if fake.FindFailedContainersStub != nil {
		return fake.FindFailedContainersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findFailedContainersReturns.result1, fake.findFailedContainersReturns.result2
}

func (fake *FakeContainerRepository) FindFailedContainersCallCount() int {
	fake.findFailedContainersMutex.RLock()
	defer fake.findFailedContainersMutex.RUnlock()
	return len(fake.findFailedContainersArgsForCall)
}

func (fake *FakeContainerRepository) FindFailedContainersReturns(result1 []db.FailedContainer, result2 error) {
	fake.FindFailedContainersStub = nil
	fake.findFailedContainersReturns = struct {
		result1 []db.FailedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerRepository) FindFailedContainersReturnsOnCall(i int, result1 []db.FailedContainer, result2 error) {
	fake.FindFailedContainersStub = nil
	if fake.findFailedContainersReturnsOnCall == nil {
		fake.findFailedContainersReturnsOnCall = make(map[int]struct {
			result1 []db.FailedContainer
			result2 error
		})
	}
	fake.findFailedContainersReturnsOnCall[i] = struct {
		result1 []db.FailedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrphanedContainersMutex.RLock()
	defer fake.findOrphanedContainersMutex.RUnlock()
	fake.findFailedContainersMutex.RLock()
	defer fake.findFailedContainersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ContainerRepository = new(FakeContainerRepository)
