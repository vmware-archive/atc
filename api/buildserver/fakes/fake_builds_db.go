// This file was generated by counterfeiter
package fakes

import (
	"github.com/concourse/atc/api/buildserver"
	"github.com/concourse/atc/db"

	"sync"
)

type FakeBuildsDB struct {
	GetBuildStub        func(buildID int) (db.Build, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		buildID int
	}
	getBuildReturns struct {
		result1 db.Build
		result2 error
	}
	GetAllBuildsStub        func() ([]db.Build, error)
	getAllBuildsMutex       sync.RWMutex
	getAllBuildsArgsForCall []struct{}
	getAllBuildsReturns     struct {
		result1 []db.Build
		result2 error
	}
	JobIsPublicStub        func(jobName string) (bool, error)
	jobIsPublicMutex       sync.RWMutex
	jobIsPublicArgsForCall []struct {
		jobName string
	}
	jobIsPublicReturns struct {
		result1 bool
		result2 error
	}
	CreateOneOffBuildStub        func() (db.Build, error)
	createOneOffBuildMutex       sync.RWMutex
	createOneOffBuildArgsForCall []struct{}
	createOneOffBuildReturns     struct {
		result1 db.Build
		result2 error
	}
	SaveBuildStatusStub        func(buildID int, status db.Status) error
	saveBuildStatusMutex       sync.RWMutex
	saveBuildStatusArgsForCall []struct {
		buildID int
		status  db.Status
	}
	saveBuildStatusReturns struct {
		result1 error
	}
	GetBuildEventsStub        func(buildID int) ([]db.BuildEvent, error)
	getBuildEventsMutex       sync.RWMutex
	getBuildEventsArgsForCall []struct {
		buildID int
	}
	getBuildEventsReturns struct {
		result1 []db.BuildEvent
		result2 error
	}
}

func (fake *FakeBuildsDB) GetBuild(buildID int) (db.Build, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(buildID)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2
	}
}

func (fake *FakeBuildsDB) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildReturns(result1 db.Build, result2 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) GetAllBuilds() ([]db.Build, error) {
	fake.getAllBuildsMutex.Lock()
	fake.getAllBuildsArgsForCall = append(fake.getAllBuildsArgsForCall, struct{}{})
	fake.getAllBuildsMutex.Unlock()
	if fake.GetAllBuildsStub != nil {
		return fake.GetAllBuildsStub()
	} else {
		return fake.getAllBuildsReturns.result1, fake.getAllBuildsReturns.result2
	}
}

func (fake *FakeBuildsDB) GetAllBuildsCallCount() int {
	fake.getAllBuildsMutex.RLock()
	defer fake.getAllBuildsMutex.RUnlock()
	return len(fake.getAllBuildsArgsForCall)
}

func (fake *FakeBuildsDB) GetAllBuildsReturns(result1 []db.Build, result2 error) {
	fake.GetAllBuildsStub = nil
	fake.getAllBuildsReturns = struct {
		result1 []db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) JobIsPublic(jobName string) (bool, error) {
	fake.jobIsPublicMutex.Lock()
	fake.jobIsPublicArgsForCall = append(fake.jobIsPublicArgsForCall, struct {
		jobName string
	}{jobName})
	fake.jobIsPublicMutex.Unlock()
	if fake.JobIsPublicStub != nil {
		return fake.JobIsPublicStub(jobName)
	} else {
		return fake.jobIsPublicReturns.result1, fake.jobIsPublicReturns.result2
	}
}

func (fake *FakeBuildsDB) JobIsPublicCallCount() int {
	fake.jobIsPublicMutex.RLock()
	defer fake.jobIsPublicMutex.RUnlock()
	return len(fake.jobIsPublicArgsForCall)
}

func (fake *FakeBuildsDB) JobIsPublicArgsForCall(i int) string {
	fake.jobIsPublicMutex.RLock()
	defer fake.jobIsPublicMutex.RUnlock()
	return fake.jobIsPublicArgsForCall[i].jobName
}

func (fake *FakeBuildsDB) JobIsPublicReturns(result1 bool, result2 error) {
	fake.JobIsPublicStub = nil
	fake.jobIsPublicReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) CreateOneOffBuild() (db.Build, error) {
	fake.createOneOffBuildMutex.Lock()
	fake.createOneOffBuildArgsForCall = append(fake.createOneOffBuildArgsForCall, struct{}{})
	fake.createOneOffBuildMutex.Unlock()
	if fake.CreateOneOffBuildStub != nil {
		return fake.CreateOneOffBuildStub()
	} else {
		return fake.createOneOffBuildReturns.result1, fake.createOneOffBuildReturns.result2
	}
}

func (fake *FakeBuildsDB) CreateOneOffBuildCallCount() int {
	fake.createOneOffBuildMutex.RLock()
	defer fake.createOneOffBuildMutex.RUnlock()
	return len(fake.createOneOffBuildArgsForCall)
}

func (fake *FakeBuildsDB) CreateOneOffBuildReturns(result1 db.Build, result2 error) {
	fake.CreateOneOffBuildStub = nil
	fake.createOneOffBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) SaveBuildStatus(buildID int, status db.Status) error {
	fake.saveBuildStatusMutex.Lock()
	fake.saveBuildStatusArgsForCall = append(fake.saveBuildStatusArgsForCall, struct {
		buildID int
		status  db.Status
	}{buildID, status})
	fake.saveBuildStatusMutex.Unlock()
	if fake.SaveBuildStatusStub != nil {
		return fake.SaveBuildStatusStub(buildID, status)
	} else {
		return fake.saveBuildStatusReturns.result1
	}
}

func (fake *FakeBuildsDB) SaveBuildStatusCallCount() int {
	fake.saveBuildStatusMutex.RLock()
	defer fake.saveBuildStatusMutex.RUnlock()
	return len(fake.saveBuildStatusArgsForCall)
}

func (fake *FakeBuildsDB) SaveBuildStatusArgsForCall(i int) (int, db.Status) {
	fake.saveBuildStatusMutex.RLock()
	defer fake.saveBuildStatusMutex.RUnlock()
	return fake.saveBuildStatusArgsForCall[i].buildID, fake.saveBuildStatusArgsForCall[i].status
}

func (fake *FakeBuildsDB) SaveBuildStatusReturns(result1 error) {
	fake.SaveBuildStatusStub = nil
	fake.saveBuildStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildsDB) GetBuildEvents(buildID int) ([]db.BuildEvent, error) {
	fake.getBuildEventsMutex.Lock()
	fake.getBuildEventsArgsForCall = append(fake.getBuildEventsArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildEventsMutex.Unlock()
	if fake.GetBuildEventsStub != nil {
		return fake.GetBuildEventsStub(buildID)
	} else {
		return fake.getBuildEventsReturns.result1, fake.getBuildEventsReturns.result2
	}
}

func (fake *FakeBuildsDB) GetBuildEventsCallCount() int {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return len(fake.getBuildEventsArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildEventsArgsForCall(i int) int {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return fake.getBuildEventsArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildEventsReturns(result1 []db.BuildEvent, result2 error) {
	fake.GetBuildEventsStub = nil
	fake.getBuildEventsReturns = struct {
		result1 []db.BuildEvent
		result2 error
	}{result1, result2}
}

var _ buildserver.BuildsDB = new(FakeBuildsDB)
